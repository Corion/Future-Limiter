
[![Build Status](https://travis-ci.org/Corion/Future-Limiter.svg?branch=master)](https://github.com/Corion/Future-Limiter)

# NAME

Future::Limiter - impose rate and resource limits

# SYNOPSIS

    # max 4 requests (per host)
    my $concurrency = Future::Limiter->new(
        maximum => 4
    );

    # rate of 30 per minute
    my $rate = Future::Limiter->new(
        rate  => 0.5,
        burst => 2,
    );

    my ($host_token, $rate_token);
    $concurrency->limit( $hostname, $url )->then(sub {
        ($host_token, my $url ) = @_;
    })->then( sub {
        $rate->limit( $hostname, $url )
    })->then( sub {
        ( $rate_token, my $url ) = @_;
        request_url( $url )
    })->then(sub {
        ...
        undef $host_token;
        undef $rate_token;
    });

This module provides an API to handle rate limits and resource limits in a
unified API.

## Usage with Future::AsyncAwait

The usage with [Future::AsyncAwait](https://metacpan.org/pod/Future::AsyncAwait) is much more elegant, as you only need
to keep the token around and other parameters live implicitly in your scope:

    my( $host_token ) = await $concurrency->limit( $hostname );
    my( $rate_token ) = await $rate->limit( $hostname );
    request_url( $url )
    ...

## `$l->limit( $key, @args )`

    my $token;
    $l->limit( $key )->then( sub {
        $token = @_;
        
        ... return another Future
    })->then(sub {
    
        # release the token to release our limiting
        undef $token
    })

This method returns a [Future](https://metacpan.org/pod/Future) that will become fulfilled if the current
limit is not reached. The `$key` parameter restricts that resource to a
specific key (like, a hostname).

The future returns a token that must be released for the resource to be freed
again. Additional parameters are passed through as well.

# SEE ALSO

[Future::Mutex](https://metacpan.org/pod/Future::Mutex)

# REPOSITORY

The public repository of this module is
[http://github.com/Corion/Future-Limiter](http://github.com/Corion/Future-Limiter).

# SUPPORT

The public support forum of this module is
[https://perlmonks.org/](https://perlmonks.org/).

# BUG TRACKER

Please report bugs in this module via the RT CPAN bug queue at
[https://rt.cpan.org/Public/Dist/Display.html?Name=Future-Limiter](https://rt.cpan.org/Public/Dist/Display.html?Name=Future-Limiter)
or via mail to [future-limiter-Bugs@rt.cpan.org](https://metacpan.org/pod/future-limiter-Bugs@rt.cpan.org).

# AUTHOR

Max Maischein `corion@cpan.org`

# COPYRIGHT (c)

Copyright 2018 by Max Maischein `corion@cpan.org`.

# LICENSE

This module is released under the same terms as Perl itself.
